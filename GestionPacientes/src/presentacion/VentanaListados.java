/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion;

import java.util.Collections;
import java.util.LinkedList;
import javax.swing.DefaultListModel;
import negocio.*;
import negocio.ClasesDeComparacion.*;


/**
 *
 * @author Mosqueteros
 */
public class VentanaListados extends javax.swing.JFrame {

    /**
     * Creates new form Listados
     * @param g
     */
    public VentanaListados(GestorPacientes g) {
        initComponents();
        gestor=g;
        modelo=new DefaultListModel();
        lstListado.setModel(modelo);
        Collections.sort(gestor.getListaPacientes());
        cargaPacientesEnLista();
        modeloSeleccionados=new DefaultListModel();
        lstPacientesSeleccionados.setModel(modeloSeleccionados);
    }
    
       
    public void cargaPacientesEnLista(){
        if(gestor.getListaPacientes().isEmpty())
            modelo.addElement("Aun no hay pacientes cargados");
        else{
            int cant=gestor.getListaPacientes().size();
            LinkedList<Paciente> lista=gestor.getListaPacientes();
            for(int i=0;i<cant;i++)
                modelo.addElement(lista.get(i));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblGenerListOrdPor = new javax.swing.JLabel();
        cmbCriterioOrden = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstListado = new javax.swing.JList<>();
        btnEliminarSeleccionados = new javax.swing.JButton();
        AgregarSeleccionadosAListado = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstPacientesSeleccionados = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Listados");

        lblGenerListOrdPor.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblGenerListOrdPor.setText("Generar Listados Ordenados por:");

        cmbCriterioOrden.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Apellido", "Nombre", "Edad", "Altura", "Peso" }));
        cmbCriterioOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCriterioOrdenActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(lstListado);

        btnEliminarSeleccionados.setText("Eliminar de la base de datos los elementos seleccionados");
        btnEliminarSeleccionados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarSeleccionadosActionPerformed(evt);
            }
        });

        AgregarSeleccionadosAListado.setText("Agregar elementos seleccionados a listado");
        AgregarSeleccionadosAListado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AgregarSeleccionadosAListadoActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(lstPacientesSeleccionados);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblGenerListOrdPor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbCriterioOrden, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(btnEliminarSeleccionados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AgregarSeleccionadosAListado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(lblGenerListOrdPor)
                .addGap(18, 18, 18)
                .addComponent(cmbCriterioOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEliminarSeleccionados)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(AgregarSeleccionadosAListado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbCriterioOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCriterioOrdenActionPerformed
        if(!(modelo.getElementAt(0).equals("Aun no hay pacientes cargados"))){
            modelo.removeAllElements();
            String sel=(String)cmbCriterioOrden.getSelectedItem();
            switch(sel){
                case "Apellido":
                    gestor.ordenarSegunParametro(new ComparaPorApellido());
                    break;
                case "Nombre":
                    gestor.ordenarSegunParametro(new ComparaPorNombre());
                    break;
                case "Edad":
                    gestor.ordenarSegunParametro(new ComparaPorEdad());
                    break;
                case "Altura":
                    gestor.ordenarSegunParametro(new ComparaPorAltura());
                    break;
                case "Peso":
                    gestor.ordenarSegunParametro(new ComparaPorPeso());
                    break;
            }
            cargaPacientesEnLista();
        }
    }//GEN-LAST:event_cmbCriterioOrdenActionPerformed

    private void btnEliminarSeleccionadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarSeleccionadosActionPerformed
        if(!(modelo.getElementAt(0).equals("Aun no hay pacientes cargados"))){
            int[] seleccionados=lstListado.getSelectedIndices();
            LinkedList<Paciente> pacientesSelecc;
            pacientesSelecc=new LinkedList();
            for(int i=0;i<seleccionados.length;i++)
                pacientesSelecc.add(gestor.getListaPacientes().get(seleccionados[i]));
            for(int i=0;i<pacientesSelecc.size();i++)
                gestor.getListaPacientes().remove(pacientesSelecc.get(i));
            modelo.removeAllElements();
            cargaPacientesEnLista();
        }  
    }//GEN-LAST:event_btnEliminarSeleccionadosActionPerformed

    private void AgregarSeleccionadosAListadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AgregarSeleccionadosAListadoActionPerformed
        int[]seleccionados=lstListado.getSelectedIndices();
        for(int i=0;i<seleccionados.length;i++){
                Paciente elem=(Paciente)modelo.getElementAt(seleccionados[i]);
                if(!modeloSeleccionados.contains(elem))
                    modeloSeleccionados.addElement(elem);
        }
    }//GEN-LAST:event_AgregarSeleccionadosAListadoActionPerformed

    private GestorPacientes gestor;
    private DefaultListModel modelo, modeloSeleccionados;
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AgregarSeleccionadosAListado;
    private javax.swing.JButton btnEliminarSeleccionados;
    private javax.swing.JComboBox<String> cmbCriterioOrden;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblGenerListOrdPor;
    private javax.swing.JList<String> lstListado;
    private javax.swing.JList<String> lstPacientesSeleccionados;
    // End of variables declaration//GEN-END:variables
}
